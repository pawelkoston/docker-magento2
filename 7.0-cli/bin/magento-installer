#!/bin/bash

[ "$DEBUG" = "true" ] && set -x

AUTH_JSON_FILE="$(composer -g config data-dir 2>/dev/null)/auth.json"

if [ -f "$AUTH_JSON_FILE" ]; then
    # Get composer auth information into an environment variable to avoid "you need
    # to be using an interactive terminal to authenticate".
    COMPOSER_AUTH=`cat $AUTH_JSON_FILE`
fi

MAGENTO_COMMAND="magento-command"

if [ ! -f "$MAGENTO_ROOT/composer.json" ]; then
    echo "Creating Magento ($M2SETUP_VERSION) project from composer"

    composer create-project \
        --repository-url=https://repo.magento.com/ \
        magento/project-community-edition=$M2SETUP_VERSION \
        --no-interaction \
        $MAGENTO_ROOT

    # Magento forces Composer to use $MAGENTO_ROOT/var/composer_home as the home directory
    # when running any Composer commands through Magento, e.g. sampledata:deploy, so copy the
    # credentials over to it to prevent Composer from asking for them again
    if [ -f "$AUTH_JSON_FILE" ]; then
        mkdir -p $MAGENTO_ROOT/var/composer_home
        cp $AUTH_JSON_FILE $MAGENTO_ROOT/var/composer_home/auth.json
    fi
else
    echo "Magento installation found in $MAGENTO_ROOT, installing composer dependencies"
    composer --working-dir=$MAGENTO_ROOT install
fi

chown -R www-data:www-data $MAGENTO_ROOT

if [ ! "$M2SETUP_INSTALL_DB" = "false" ]; then

    echo "Install Magento"

    INSTALL_COMMAND="$MAGENTO_COMMAND setup:install \
        --db-host=$M2SETUP_DB_HOST \
        --db-name=$M2SETUP_DB_NAME \
        --db-user=$M2SETUP_DB_USER \
        --db-password=$M2SETUP_DB_PASSWORD \
        --base-url=$M2SETUP_BASE_URL \
        --admin-firstname=$M2SETUP_ADMIN_FIRSTNAME \
        --admin-lastname=$M2SETUP_ADMIN_LASTNAME \
        --admin-email=$M2SETUP_ADMIN_EMAIL \
        --admin-user=$M2SETUP_ADMIN_USER \
        --admin-password=$M2SETUP_ADMIN_PASSWORD"

    # Use a separate value for secure base URL, if the variable is set
    if [ -n "$M2SETUP_SECURE_BASE_URL" ]; then
        INSTALL_COMMAND="$INSTALL_COMMAND --base-url-secure=$M2SETUP_SECURE_BASE_URL"
    fi

    # Only define a backend-frontname if the variable is set, or not empty.
    if [ -n "$M2SETUP_BACKEND_FRONTNAME" ]; then
        INSTALL_COMMAND="$INSTALL_COMMAND --backend-frontname=$M2SETUP_BACKEND_FRONTNAME"
    fi

    if [ "$M2SETUP_USE_SAMPLE_DATA" = "true" ]; then

      $MAGENTO_COMMAND sampledata:deploy
      composer --working-dir=$MAGENTO_ROOT update

      INSTALL_COMMAND="$INSTALL_COMMAND --use-sample-data"
    fi

    $INSTALL_COMMAND

    echo "add elastic suite module"
    composer --working-dir=$MAGENTO_ROOT require 'smile/elasticsuite'
    $MAGENTO_COMMAND module:enable Smile_ElasticsuiteCore Smile_ElasticsuiteCatalog Smile_ElasticsuiteSwatches Smile_ElasticsuiteCatalogRule Smile_ElasticsuiteVirtualCategory Smile_ElasticsuiteThesaurus Smile_ElasticsuiteCatalogOptimizer Smile_ElasticsuiteTracker
    $MAGENTO_COMMAND setup:upgrade

    $MAGENTO_COMMAND index:reindex
    $MAGENTO_COMMAND dev:source-theme:deploy
    $MAGENTO_COMMAND setup:static-content:deploy -f

else
    echo "Skipping DB installation"
fi

echo "Fixing file permissions.."

[ -f "$MAGENTO_ROOT/vendor/magento/framework/Filesystem/DriverInterface.php" ] \
  && sed -i 's/0770/0775/g' $MAGENTO_ROOT/vendor/magento/framework/Filesystem/DriverInterface.php

[ -f "$MAGENTO_ROOT/vendor/magento/framework/Filesystem/DriverInterface.php" ] \
  && sed -i 's/0660/0664/g' $MAGENTO_ROOT/vendor/magento/framework/Filesystem/DriverInterface.php

find $MAGENTO_ROOT/pub -type f -exec chmod 664 {} \;
find $MAGENTO_ROOT/pub -type d -exec chmod 775 {} \;
find $MAGENTO_ROOT/var/generation -type d -exec chmod g+s {} \;

chown -R www-data:www-data $MAGENTO_ROOT

echo "configure magento2 for redis"

sed -i "/'session' =>/,+4d" $MAGENTO_ROOT/app/etc/env.php
sed -i "/  'MAGE_MODE' => 'default',/a   'cache_types' =>" $MAGENTO_ROOT/app/etc/env.php
sed -i '$ d' $MAGENTO_ROOT/app/etc/env.php

echo "'cache' => array(" >> $MAGENTO_ROOT/app/etc/env.php
echo "'frontend' => array(" >> $MAGENTO_ROOT/app/etc/env.php
echo "'default' => array(" >> $MAGENTO_ROOT/app/etc/env.php
echo "'backend' => 'Cm_Cache_Backend_Redis'," >> $MAGENTO_ROOT/app/etc/env.php
echo "'backend_options' => array(" >> $MAGENTO_ROOT/app/etc/env.php
echo "'server' => 'redis'," >> $MAGENTO_ROOT/app/etc/env.php
echo "'port' => '6379'," >> $MAGENTO_ROOT/app/etc/env.php
echo "'persistent' => '', // Specify a unique string like "cache-db0" to enable persistent connections." >> $MAGENTO_ROOT/app/etc/env.php
echo "'database' => '0'," >> $MAGENTO_ROOT/app/etc/env.php
echo "        'password' => ''," >> $MAGENTO_ROOT/app/etc/env.php
echo "        'force_standalone' => '0', // 0 for phpredis, 1 for standalone PHP" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'connect_retries' => '1', // Reduces errors due to random connection failures" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'read_timeout' => '10', // Set read timeout duration" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'automatic_cleaning_factor' => '0', // Disabled by default" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'compress_data' => '1', // 0-9 for compression level, recommended: 0 or 1" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'compress_tags' => '1', // 0-9 for compression level, recommended: 0 or 1" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'compress_threshold' => '20480', // Strings below this size will not be compressed" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'compression_lib' => 'gzip', // Supports gzip, lzf and snappy," >> $MAGENTO_ROOT/app/etc/env.php
echo "        'use_lua' => '0' // Lua scripts should be used for some operations" >> $MAGENTO_ROOT/app/etc/env.php
echo "      )" >> $MAGENTO_ROOT/app/etc/env.php
echo "    )," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'page_cache' => array(" >> $MAGENTO_ROOT/app/etc/env.php
echo "      'backend' => 'Cm_Cache_Backend_Redis'," >> $MAGENTO_ROOT/app/etc/env.php
echo "      'backend_options' => array(" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'server' => 'redis'," >> $MAGENTO_ROOT/app/etc/env.php
echo "        'port' => '6379'," >> $MAGENTO_ROOT/app/etc/env.php
echo "        'persistent' => '', // Specify a unique string like "cache-db0" to enable persistent connections." >> $MAGENTO_ROOT/app/etc/env.php
echo "        'database' => '1', // Separate database 1 to keep FPC separately" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'password' => ''," >> $MAGENTO_ROOT/app/etc/env.php
echo "        'force_standalone' => '0', // 0 for phpredis, 1 for standalone PHP" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'connect_retries' => '1', // Reduces errors due to random connection failures" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'lifetimelimit' => '57600', // 16 hours of lifetime for cache record" >> $MAGENTO_ROOT/app/etc/env.php
echo "        'compress_data' => '0' // DISABLE compression for EE FPC since it already uses compression" >> $MAGENTO_ROOT/app/etc/env.php
echo "      )" >> $MAGENTO_ROOT/app/etc/env.php
echo "    )" >> $MAGENTO_ROOT/app/etc/env.php
echo "  )" >> $MAGENTO_ROOT/app/etc/env.php
echo ")," >> $MAGENTO_ROOT/app/etc/env.php
echo "'session' =>" >> $MAGENTO_ROOT/app/etc/env.php
echo "array (" >> $MAGENTO_ROOT/app/etc/env.php
echo "  'save' => 'redis'," >> $MAGENTO_ROOT/app/etc/env.php
echo "  'redis' =>" >> $MAGENTO_ROOT/app/etc/env.php
echo "  array (" >> $MAGENTO_ROOT/app/etc/env.php
echo "    'host' => 'redis'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'port' => '6379'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'password' => ''," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'timeout' => '2.5'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'persistent_identifier' => ''," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'database' => '2'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'compression_threshold' => '2048'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'compression_library' => 'gzip'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'log_level' => '1'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'max_concurrency' => '6'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'break_after_frontend' => '5'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'break_after_adminhtml' => '30'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'first_lifetime' => '600'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'bot_first_lifetime' => '60'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'bot_lifetime' => '7200'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'disable_locking' => '0'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'min_lifetime' => '60'," >> $MAGENTO_ROOT/app/etc/env.php
echo "    'max_lifetime' => '2592000'" >> $MAGENTO_ROOT/app/etc/env.php
echo "  )" >> $MAGENTO_ROOT/app/etc/env.php
echo ")," >> $MAGENTO_ROOT/app/etc/env.php
echo ");" >> $MAGENTO_ROOT/app/etc/env.php

echo "finished updating, app/etc/env.php, clearing magento2 cache for redis switchover"
rm -rf $MAGENTO_ROOT/var/cache/*
rm -rf $MAGENTO_ROOT/var/session/*
rm -rf $MAGENTO_ROOT/var/page_cache/*

echo "Installation complete"
